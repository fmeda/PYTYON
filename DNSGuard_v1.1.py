#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SentinelDNS - Comparador Avan√ßado de Respostas DNS
Autor: Fabiano A. (Exemplo Profissional)
Descri√ß√£o: Compara respostas de m√∫ltiplos resolvedores DNS, alerta para diverg√™ncias e integra com Threat Intelligence + Alertas em Tempo Real.
"""

import os
import sys
import json
import csv
import socket
import signal
import argparse
import smtplib
from email.mime.text import MIMEText
from datetime import datetime
from colorama import Fore, Style, init

# Threat Intelligence simples (exemplo)
THREAT_INTEL_IPS = ["45.33.32.156", "103.21.244.0"]

# Inicializa cores no Windows/Linux/Mac
init(autoreset=True)

# Lista de DNS resolvers p√∫blicos confi√°veis
RESOLVERS = {
    "Google": "8.8.8.8",
    "Cloudflare": "1.1.1.1",
    "OpenDNS": "208.67.222.222",
    "Quad9": "9.9.9.9",
    "Local": None  # Usar configura√ß√£o local do sistema
}

# Controle de interrup√ß√£o (CTRL+C)
def handle_interrupt(sig, frame):
    print(Fore.YELLOW + "\n[!] Execu√ß√£o interrompida pelo usu√°rio.")
    sys.exit(0)

signal.signal(signal.SIGINT, handle_interrupt)

# Fun√ß√£o de resolu√ß√£o DNS
def dns_lookup(domain, server=None):
    try:
        if server:
            import dns.resolver
            res = dns.resolver.Resolver()
            res.nameservers = [server]
            answer = res.resolve(domain, 'A')
            return sorted([rdata.address for rdata in answer])
        else:
            return sorted(socket.gethostbyname_ex(domain)[2])
    except Exception as e:
        return [f"Erro: {e}"]

# Comparar respostas
def compare_dns(domain):
    results = {}
    for name, server in RESOLVERS.items():
        results[name] = dns_lookup(domain, server)
    return results

# Checar se resposta √© suspeita
def check_suspicious(ips):
    for ip in ips:
        if ip in THREAT_INTEL_IPS:
            return True
    return False

# Exibir resultado formatado
def display_results(domain, results):
    print(Fore.CYAN + f"\n[+] Resultados para {domain} ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})")
    reference = None
    for resolver, ips in results.items():
        if not reference:
            reference = ips
        status = Fore.GREEN + "OK"
        if ips != reference:
            status = Fore.RED + "DIVERGENTE"
        if check_suspicious(ips):
            status = Fore.RED + "SUSPEITO (Threat Intel)"
        print(f"  {resolver:<10}: {ips} {status}")

# Exportar resultados
def export_results(domain, results, fmt="json"):
    filename = f"dns_check_{domain}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    if fmt == "json":
        with open(filename + ".json", "w") as f:
            json.dump(results, f, indent=4)
    elif fmt == "csv":
        with open(filename + ".csv", "w", newline='') as f:
            writer = csv.writer(f)
            writer.writerow(["Resolver", "Respostas"])
            for resolver, ips in results.items():
                writer.writerow([resolver, ", ".join(ips)])
    elif fmt == "txt":
        with open(filename + ".txt", "w") as f:
            for resolver, ips in results.items():
                f.write(f"{resolver}: {ips}\n")
    print(Fore.YELLOW + f"[i] Resultados exportados para {filename}.{fmt}")

# Enviar alerta por e-mail (exemplo)
def send_alert(domain, results, email_to):
    msg = MIMEText(json.dumps(results, indent=4))
    msg["Subject"] = f"[ALERTA DNS] Diverg√™ncia detectada em {domain}"
    msg["From"] = "alerta@sentineldns.local"
    msg["To"] = email_to

    try:
        with smtplib.SMTP("localhost") as server:
            server.send_message(msg)
        print(Fore.YELLOW + f"[i] Alerta enviado para {email_to}")
    except Exception as e:
        print(Fore.RED + f"[!] Falha ao enviar alerta: {e}")

# Fun√ß√£o para exibir exemplos amig√°veis de uso
def print_examples():
    print(Fore.MAGENTA + "\nüìò Exemplos de uso:")
    print("  ‚ñ∂ Verificar dom√≠nio simples:")
    print("     python3 sentineldns.py exemplo.com")
    print("\n  ‚ñ∂ Exportar resultados em JSON:")
    print("     python3 sentineldns.py exemplo.com --export json")
    print("\n  ‚ñ∂ Enviar alerta por e-mail em caso de diverg√™ncia:")
    print("     python3 sentineldns.py exemplo.com --alert admin@empresa.com")

# CLI
if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="SentinelDNS - Comparador Avan√ßado de Respostas DNS",
        epilog="Use --help para ver exemplos detalhados.",
        add_help=False
    )
    parser.add_argument("domain", nargs="?", help="Dom√≠nio a ser consultado")
    parser.add_argument("--export", choices=["json", "csv", "txt"], help="Exportar resultados")
    parser.add_argument("--alert", help="Enviar alerta para email se diverg√™ncia for encontrada")
    parser.add_argument("--version", action="version", version="SentinelDNS v2.1")
    parser.add_argument("-h", "--help", action="store_true", help="Mostrar esta ajuda profissionalizada")
    args = parser.parse_args()

    if args.help or not args.domain:
        print(Fore.BLUE + Style.BRIGHT + "\nSentinelDNS - Comparador Avan√ßado de Respostas DNS")
        print("Ferramenta para detectar manipula√ß√£o, hijack ou spoofing de DNS.")
        print("\nUso:")
        print("  python3 sentineldns.py <dominio> [op√ß√µes]\n")
        print("Op√ß√µes:")
        print("  --export [json|csv|txt]   Exporta os resultados em formato escolhido")
        print("  --alert <email>           Envia alerta em caso de diverg√™ncia suspeita")
        print("  --version                 Exibe a vers√£o atual")
        print("  -h, --help                Mostra esta ajuda e exemplos")
        print_examples()
        sys.exit(0)

    print(Fore.BLUE + Style.BRIGHT + "SentinelDNS - Detectando Manipula√ß√£o ou Resposta Suspeita")

    results = compare_dns(args.domain)
    display_results(args.domain, results)

    if args.export:
        export_results(args.domain, results, args.export)

    # Checar diverg√™ncia para alerta
    unique_responses = set()
    for ips in results.values():
        unique_responses.add(tuple(ips))
    if len(unique_responses) > 1 or any(check_suspicious(ips) for ips in results.values()):
        if args.alert:
            send_alert(args.domain, results, args.alert)

    print(Fore.GREEN + "\n[‚úî] Finalizado com sucesso.")